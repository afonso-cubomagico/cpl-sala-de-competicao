
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Cubic Portugal League</title>
  <style>
    body {
      margin: 0;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(to right, #1f4037, #99f2c8);
      color: #333;
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 20px;
      min-height: 100vh;
      box-sizing: border-box;
    }
    h1 {
      color: #fff;
      margin-bottom: 10px;
    }
    .container {
      background: white;
      border-radius: 20px;
      padding: 30px;
      max-width: 600px;
      width: 100%;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
      box-sizing: border-box;
    }
    input, button {
      padding: 10px;
      margin: 10px 0;
      font-size: 16px;
      width: 100%;
      border-radius: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box;
    }
    button {
      background-color: #1f4037;
      color: white;
      cursor: pointer;
      transition: 0.3s;
    }
    button:hover {
      background-color: #145a32;
    }
    .scramble {
      font-weight: bold;
      margin: 10px 0;
      font-size: 1.2em;
    }
    .penalties {
      display: flex;
      justify-content: space-around;
      margin: 10px 0;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
    }
    th, td {
      border: 1px solid #ccc;
      padding: 8px;
      text-align: center;
    }
    th {
      background-color: #f2f2f2;
    }
    /* Esconde as seções que não devem aparecer inicialmente */
    #solveContainer, #resultsContainer {
      display: none;
    }
  </style>


  <h1>Cubic Portugal League</h1>
  <div class="container" id="idContainer">
    <input type="text" id="idInput" placeholder="Introduz o ID da sala">
    <button onclick="verificarID()">Entrar</button>
  </div>

  <div class="container" id="solveContainer">
    <div id="solveFields">
      <div id="scramble" class="scramble"></div>
      <input type="text" id="tempoInput" placeholder="Tempo (ex: 12.34)">
      <div class="penalties">
        <label><input type="radio" name="penalidade" value="+2"> +2s</label>
        <label><input type="radio" name="penalidade" value="DNF"> DNF</label>
      </div>
      <button onclick="submeterTempo()">Submeter tempo</button>
    </div>
    
    <!-- Tabela de resultados (sempre visível quando se entra no modo solve) -->
    <table id="tabelaTempos">
      <thead>
        <tr><th>Scramble</th><th>Tempo</th><th>Penalidade</th></tr>
      </thead>
      <tbody></tbody>
    </table>
    <div id="mediaFinal" style="margin-top:20px; font-weight:bold;"></div>
  </div>

  <div class="container" id="resultsContainer">
    <!-- Esta seção só será mostrada quando todas as solves estiverem completas -->
    <h2>Resultados Finais</h2>
    <table id="finalTabela">
      <thead>
        <tr><th>Scramble</th><th>Tempo</th><th>Penalidade</th></tr>
      </thead>
      <tbody></tbody>
    </table>
    <div id="finalMedia" style="margin-top:20px; font-weight:bold;"></div>
  </div>

  <script>
    // Todos os IDs e as suas scrambles
    const scramblesPorID = {
      "X7M3A9": [
        "F2 R U2 R' B2 F R2 U2 L D' R U' R' F' L U2 F2 U'",
        "B L2 D2 B' L U' R2 D' R' F2 L' U2 F' L2 U' F' D2",
        "R U R2 F D2 L' B' U' F2 R B' R' F L2 D F R",
        "D2 L2 F U' L D' B2 U2 R' F L' B2 R2 U F' L2 D B",
        "F R2 U' L2 F' U B2 R F L' F2 U B2 L' U F' L D"
      ],
      "L2P8Q5": [
        "D2 L' F2 U R2 F D' B2 U' F' D R2 F' L2 U F2 R'",
        "R F2 D B L2 F R2 U' R F L U F' B2 U2 F R2",
        "U F2 B R2 U L D' F L' U2 F R B2 D' R2 U2 F'",
        "F' L D' R F2 U L' F' L2 U2 F' R2 L' D' B2 L D",
        "L F2 U L D' R B2 U R2 F' U' L D2 R U2 L F"
      ],
      "A1C7X3": [
        "R2 U2 F D' B R' L U R2 F U' L B' R' U2 F' L D'",
        "L' B2 R U2 L D' F2 R' F L2 U' B' D R U' R2 F L'",
        "D F' R' F2 D2 B U R L2 F R2 D' F' R' L2 B' R U",
        "F L' R U2 F L U' F L2 U' B2 D R2 F' D' R2 F L",
        "B2 U R F2 U' F' D B R2 F' L2 U2 F R' B2 D F' L"
      ],
      "T9K2Z8": [
        "F2 U L D B L F' R2 F R U' B2 F2 U' F R2 F' L",
        "B2 L2 U' R' F' D2 R F2 U2 L R' F' D L2 R U' F2",
        "U F' R U' F2 D' F L' F' L F' R2 U' L2 F2 U L",
        "D2 R F U' F R2 L U' F R2 B' D' F2 R U' F' R D",
        "L' F R2 B L D' F' L2 U' F R2 F D L' R F' L B"
      ],
      "B6F4N2": [
        "U2 R2 F U L D' B2 F R' F' U' R2 F2 D F L D2 F",
        "F' R2 D2 L2 U' F L D R' F L2 B' U' F' R D' F2",
        "L2 F' R L2 F' L D2 F R2 U' F D' F' R2 F U F2 D",
        "D R U' F L U' R2 F U2 F' R2 F L D' F' R U F'",
        "F U L' R U' R2 F D' F' R' D' F' U' F R U' L2"
      ],
      "J3W7V1": [
        "R2 D F R L U' L F' R U' F2 B' U2 F R' L F' D",
        "U' F R2 F' R2 U F2 B2 L2 R' F U' F2 D L2 R U",
        "L F D L U2 R' F L U F2 D' R2 U' F2 U F2 D' L2",
        "F2 D F' R L F2 B L U L2 F' D2 B R' F R2 F2 D2",
        "F D R U' L2 F2 U F' R2 B2 D L' F U' R2 F' U'"
      ],
      "R5Y8M4": [
        "F2 U R F2 L2 U2 F' L' R F2 D2 B2 R' F R2 F' L D",
        "L2 U2 R D L2 F R' F2 U R F2 U L2 R' F2 L2 F L",
        "B2 U F R L U2 F2 D' F' L R2 F' U F' R F2 R2 U",
        "R U F2 L' F2 R' L2 F D L2 F2 U' L' D' L R F U2",
        "L F U' F R2 U F' R2 F D' F2 B2 U' L' F' L F' D"
      ],
      "P2X9L7": [
        "D' F2 L F2 R' F U2 L U' F' L2 F' D' B' F L2 F'",
        "U F R2 U' F R' U2 F' D L2 F' U' R F L' U2 R",
        "L' F2 U R F' L D' F' R F2 D R2 U F' L' F2 R L",
        "B2 L2 F U L' F D' R2 F' R U2 F' R2 F2 U' F' L2",
        "U' F2 R L U F' R F' L2 F' R U' F2 L F' D F' U"
      ],
      "K1Z4T8": [
        "F' U R2 F L' R F' D' F L U' F R2 F2 L' F2 L2 F",
        "D' R F' D F2 L2 F' D R U2 F' R L' D2 F' U2 F2",
        "R U' F2 L2 F D2 L' F U2 F R F2 R L' F2 U F L",
        "D R2 F L U R L U' F' R' F' U' F L2 D' F' L2 F'",
        "U' F2 R L D' F R L' F' U2 F' L U' F L F2 R2 F'"
      ],
      "N8B3F6": [
        "L' F R2 F2 R' F' D' R' U L2 U F' L2 R' U F' L2",
        "F2 L F2 U F R2 D2 L' F' U' R' F2 L D2 L F' R2",
        "F D L F2 U2 R L' F U2 F L' F2 R U2 F' L2 D' F2",
        "U2 F R L U' R2 D' R F2 L2 U' F2 D' F' R' L' U2 F",
        "U' L2 D' F' L2 D' L2 F2 U2 F' R F2 L2 U' F R F'"
      ]
    };

    let solves = [];
    let scrambles = [];
    let idAtual = "";
    let solveIndex = 0; // para contar solves

    // Quando se verifica o ID, esconde o container do ID e mostra o container de solves.
    function verificarID() {
      const id = document.getElementById("idInput").value.trim().toUpperCase();
      const userKey = `usado_${id}_${navigator.userAgent}`;
      if (!scramblesPorID[id]) {
        alert("ID inválido!");
        return;
      }
      if (localStorage.getItem(userKey)) {
        alert("Já utilizaste este ID neste dispositivo!");
        return;
      }
      localStorage.setItem(userKey, true);
      idAtual = id;
      scrambles = scramblesPorID[id];
      solves = [];
      solveIndex = 0;

      // Esconde o container do ID
      document.getElementById("idContainer").style.display = "none";
      // Mostra o container de solves
      document.getElementById("solveContainer").style.display = "block";
      mostrarProximoScramble();
    }

    // Mostra o scramble atual ou, se concluiu as 5 solves, chama a função para finalizar.
    function mostrarProximoScramble() {
      if (solveIndex >= 5) {
        finalizarSessao();
        return;
      }
      document.getElementById("scramble").innerText = `Scramble #${solveIndex + 1}: ${scrambles[solveIndex]}`;
      // Limpa o campo de tempo e as penalidades
      document.getElementById("tempoInput").value = "";
      document.querySelectorAll('input[name="penalidade"]').forEach(el => el.checked = false);
    }

    // Submete o tempo e atualiza a tabela
    function submeterTempo() {
      const tempoStr = document.getElementById("tempoInput").value;
      const penalidade = document.querySelector('input[name="penalidade"]:checked')?.value || "";
      if (!tempoStr || isNaN(parseFloat(tempoStr))) {
        alert("Insere um tempo válido antes de submeter!");
        return;
      }
      const tempo = parseFloat(tempoStr);
      solves.push({
        scramble: scrambles[solveIndex],
        tempo: tempo,
        penalidade: penalidade
      });
      atualizarTabela();
      solveIndex++;
      mostrarProximoScramble();
    }

    // Atualiza a tabela de resultados
    function atualizarTabela() {
      const tbody = document.querySelector("#tabelaTempos tbody");
      tbody.innerHTML = "";
      solves.forEach(s => {
        const tr = document.createElement("tr");
        tr.innerHTML = `<td>${s.scramble}</td><td>${s.tempo}</td><td>${s.penalidade}</td>`;
        tbody.appendChild(tr);
      });
    }

    // Quando 5 solves forem submetidos, esconde os campos de solve e mostra somente a tabela final e a média.
    function finalizarSessao() {
      // Esconde os campos de entrada
      document.getElementById("solveFields").style.display = "none";
      // Opcional: move a tabela e média para um container exclusivo de resultados finais
      document.getElementById("resultsContainer").style.display = "block";
      // Preenche a tabela final duplicando o que já está
      const finalTbody = document.querySelector("#finalTabela tbody");
      finalTbody.innerHTML = document.querySelector("#tabelaTempos tbody").innerHTML;
      calcularMedia();
    }

    // Calcula e exibe a média ao5
    function calcularMedia() {
      // Aplica as penalidades: DNF transforma em Infinity; +2 soma 2 ao tempo
      let temposValidos = solves.map(s => {
        if (s.penalidade === "DNF") return Infinity;
        if (s.penalidade === "+2") return s.tempo + 2;
        return s.tempo;
      });
      // Se mais do que um DNF ocorrer, a média é DNF.
      if (temposValidos.filter(t => t === Infinity).length > 1) {
        document.getElementById("finalMedia").innerText = "Média ao5: DNF (2 ou mais DNFs)";
        return;
      }
      temposValidos.sort((a, b) => a - b);
      // Remove o menor e o maior valor (melhor e pior solve) se houver 5 solves
      if (temposValidos.length === 5) {
        temposValidos.shift();  // remove o menor (melhor tempo)
        temposValidos.pop();    // remove o maior (pior tempo)
      }
      const media = temposValidos.reduce((acc, val) => acc + val, 0) / temposValidos.length;
      document.getElementById("finalMedia").innerText = `Média ao5: ${media.toFixed(2)}s`;
    }
  </script>


